// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: prehog/v1alpha/sales.proto

package prehogv1alphaconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha "github.com/gravitational/prehog/gen/proto/prehog/v1alpha"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SalesReportingServiceName is the fully-qualified name of the SalesReportingService service.
	SalesReportingServiceName = "prehog.v1alpha.SalesReportingService"
)

// SalesReportingServiceClient is a client for the prehog.v1alpha.SalesReportingService service.
type SalesReportingServiceClient interface {
	IdentifyAccount(context.Context, *connect_go.Request[v1alpha.IdentifyAccountRequest]) (*connect_go.Response[v1alpha.IdentifyAccountResponse], error)
	UpdateAccount(context.Context, *connect_go.Request[v1alpha.UpdateAccountRequest]) (*connect_go.Response[v1alpha.UpdateAccountResponse], error)
	SubmitSalesEvent(context.Context, *connect_go.Request[v1alpha.SubmitSalesEventRequest]) (*connect_go.Response[v1alpha.SubmitSalesEventResponse], error)
}

// NewSalesReportingServiceClient constructs a client for the prehog.v1alpha.SalesReportingService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSalesReportingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SalesReportingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &salesReportingServiceClient{
		identifyAccount: connect_go.NewClient[v1alpha.IdentifyAccountRequest, v1alpha.IdentifyAccountResponse](
			httpClient,
			baseURL+"/prehog.v1alpha.SalesReportingService/IdentifyAccount",
			opts...,
		),
		updateAccount: connect_go.NewClient[v1alpha.UpdateAccountRequest, v1alpha.UpdateAccountResponse](
			httpClient,
			baseURL+"/prehog.v1alpha.SalesReportingService/UpdateAccount",
			opts...,
		),
		submitSalesEvent: connect_go.NewClient[v1alpha.SubmitSalesEventRequest, v1alpha.SubmitSalesEventResponse](
			httpClient,
			baseURL+"/prehog.v1alpha.SalesReportingService/SubmitSalesEvent",
			opts...,
		),
	}
}

// salesReportingServiceClient implements SalesReportingServiceClient.
type salesReportingServiceClient struct {
	identifyAccount  *connect_go.Client[v1alpha.IdentifyAccountRequest, v1alpha.IdentifyAccountResponse]
	updateAccount    *connect_go.Client[v1alpha.UpdateAccountRequest, v1alpha.UpdateAccountResponse]
	submitSalesEvent *connect_go.Client[v1alpha.SubmitSalesEventRequest, v1alpha.SubmitSalesEventResponse]
}

// IdentifyAccount calls prehog.v1alpha.SalesReportingService.IdentifyAccount.
func (c *salesReportingServiceClient) IdentifyAccount(ctx context.Context, req *connect_go.Request[v1alpha.IdentifyAccountRequest]) (*connect_go.Response[v1alpha.IdentifyAccountResponse], error) {
	return c.identifyAccount.CallUnary(ctx, req)
}

// UpdateAccount calls prehog.v1alpha.SalesReportingService.UpdateAccount.
func (c *salesReportingServiceClient) UpdateAccount(ctx context.Context, req *connect_go.Request[v1alpha.UpdateAccountRequest]) (*connect_go.Response[v1alpha.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// SubmitSalesEvent calls prehog.v1alpha.SalesReportingService.SubmitSalesEvent.
func (c *salesReportingServiceClient) SubmitSalesEvent(ctx context.Context, req *connect_go.Request[v1alpha.SubmitSalesEventRequest]) (*connect_go.Response[v1alpha.SubmitSalesEventResponse], error) {
	return c.submitSalesEvent.CallUnary(ctx, req)
}

// SalesReportingServiceHandler is an implementation of the prehog.v1alpha.SalesReportingService
// service.
type SalesReportingServiceHandler interface {
	IdentifyAccount(context.Context, *connect_go.Request[v1alpha.IdentifyAccountRequest]) (*connect_go.Response[v1alpha.IdentifyAccountResponse], error)
	UpdateAccount(context.Context, *connect_go.Request[v1alpha.UpdateAccountRequest]) (*connect_go.Response[v1alpha.UpdateAccountResponse], error)
	SubmitSalesEvent(context.Context, *connect_go.Request[v1alpha.SubmitSalesEventRequest]) (*connect_go.Response[v1alpha.SubmitSalesEventResponse], error)
}

// NewSalesReportingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSalesReportingServiceHandler(svc SalesReportingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/prehog.v1alpha.SalesReportingService/IdentifyAccount", connect_go.NewUnaryHandler(
		"/prehog.v1alpha.SalesReportingService/IdentifyAccount",
		svc.IdentifyAccount,
		opts...,
	))
	mux.Handle("/prehog.v1alpha.SalesReportingService/UpdateAccount", connect_go.NewUnaryHandler(
		"/prehog.v1alpha.SalesReportingService/UpdateAccount",
		svc.UpdateAccount,
		opts...,
	))
	mux.Handle("/prehog.v1alpha.SalesReportingService/SubmitSalesEvent", connect_go.NewUnaryHandler(
		"/prehog.v1alpha.SalesReportingService/SubmitSalesEvent",
		svc.SubmitSalesEvent,
		opts...,
	))
	return "/prehog.v1alpha.SalesReportingService/", mux
}

// UnimplementedSalesReportingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSalesReportingServiceHandler struct{}

func (UnimplementedSalesReportingServiceHandler) IdentifyAccount(context.Context, *connect_go.Request[v1alpha.IdentifyAccountRequest]) (*connect_go.Response[v1alpha.IdentifyAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("prehog.v1alpha.SalesReportingService.IdentifyAccount is not implemented"))
}

func (UnimplementedSalesReportingServiceHandler) UpdateAccount(context.Context, *connect_go.Request[v1alpha.UpdateAccountRequest]) (*connect_go.Response[v1alpha.UpdateAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("prehog.v1alpha.SalesReportingService.UpdateAccount is not implemented"))
}

func (UnimplementedSalesReportingServiceHandler) SubmitSalesEvent(context.Context, *connect_go.Request[v1alpha.SubmitSalesEventRequest]) (*connect_go.Response[v1alpha.SubmitSalesEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("prehog.v1alpha.SalesReportingService.SubmitSalesEvent is not implemented"))
}
